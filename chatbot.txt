#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <algorithm> // For transform function

const int MAX_RESP = 3;
typedef std::vector<std::string> vstring;

vstring find_match(const std::string &input);
void copy(char *array[], vstring &v);
std::string to_lower_case(const std::string &str);

typedef struct {
    char *input;
    char *responses[MAX_RESP];
} record;

record KnowledgeBase[] = {
    {"WHAT IS YOUR NAME", 
    {"MY NAME IS CHATTERBOT2.",
     "YOU CAN CALL ME CHATTERBOT2.",
     "WHY DO YOU WANT TO KNOW MY NAME?"}
    },
    {"HI", 
    {"HI THERE!",
     "HOW ARE YOU?",
     "HI!"}
    },
    {"HOW ARE YOU",
    {"I'M DOING FINE!",
     "I'M DOING WELL AND YOU?",
     "WHY DO YOU WANT TO KNOW HOW AM I DOING?"}
    },
    {"WHO ARE YOU",
    {"I'M AN A.I PROGRAM.",
     "I THINK THAT YOU KNOW WHO I'M.",
     "WHY ARE YOU ASKING?"}
    },
    {"ARE YOU INTELLIGENT",
    {"YES,OFCORSE.",
     "WHAT DO YOU THINK?",
     "ACTUALLY, I'M VERY INTELLIGENT!"}
    },
    {"ARE YOU REAL",
    {"DOES THAT QUESTION REALLY MATTER TO YOU?",
     "WHAT DO YOU MEAN BY THAT?",
     "I'M AS REAL AS I CAN BE."}
    }
};

size_t nKnowledgeBaseSize = sizeof(KnowledgeBase) / sizeof(KnowledgeBase[0]);

int main() {
    srand((unsigned) time(NULL));
    std::string sInput = "";
    std::string sResponse = "";
    while (1) {
        std::cout << ">";
        std::getline(std::cin, sInput);
        sInput = to_lower_case(sInput);  // Convert input to lowercase
        vstring responses = find_match(sInput);
        
        if (sInput == "bye") {
            std::cout << "IT WAS NICE TALKING TO YOU USER, SEE YOU NEXT TIME!" << std::endl;
            break;
        } 
        else if (responses.size() == 0) {
            std::cout << "I'M NOT SURE IF I UNDERSTAND WHAT YOU ARE TALKING ABOUT." << std::endl;
        }
        else {
            int nSelection = rand() % MAX_RESP;
            sResponse = responses[nSelection];
            std::cout << sResponse << std::endl;
        } 
    }
    return 0;
}

// Search for the user's input inside the database of the program
vstring find_match(const std::string &input) {
    vstring result;
    for (int i = 0; i < nKnowledgeBaseSize; ++i) {
        if (to_lower_case(std::string(KnowledgeBase[i].input)) == input) {
            copy(KnowledgeBase[i].responses, result);
            return result;
        }
    }
    return result;
}

void copy(char *array[], vstring &v) {
    for (int i = 0; i < MAX_RESP; ++i) {
        v.push_back(array[i]);
    }
}

std::string to_lower_case(const std::string &str) {
    std::string result = str;
    std::transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}
